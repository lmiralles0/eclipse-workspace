ejemplo main
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "LinkedList.h"
#include "get_Entrada.h"
#include "offRoad.h"
#include "controller.h"


int main()
{
    int order;
    int opcion;
    char archivo[20];
    int flag = 0;
    int flagMapeado = 0;



    LinkedList* listaParticipantes = ll_newLinkedList();
    LinkedList* listaParticipantesMapeada = ll_newLinkedList();
    LinkedList* listaParticipantesMapeadaAndFilter = ll_newLinkedList();

    if(listaParticipantes == NULL && listaParticipantesMapeada == NULL && listaParticipantesMapeadaAndFilter == NULL)
    {
        printf("Error LinkedList no creado.\n");
        exit(EXIT_FAILURE);
    }
    do
    {
        printf("1).Cargar archivo.\n");
        printf("2).Imprimir lista.\n");
        printf("3).Asignar promedios.\n");
        printf("4).Filtrar por tipo.\n");
        printf("5).Mostrar posiciones.\n");
        printf("6).Guardar posiciones.\n");
        printf("7).Salir.\n");
        if(get_EntradaInt(&opcion, "Ingrese la opcion del menu.\n", "Error al ingresar opcion.\n", 7, 1, 5) == 0)
        {
            system("cls");
            switch(opcion)
            {
            case 1:
                printf("Ingrese el nombre del archivo.\n");
                fflush(stdin);
                scanf("%s", archivo);
                if(controller_loadFromText(archivo, listaParticipantes) == 0)
                {
                    printf("\nArchivo cargado con exito.\n");
                    system("pause");
                    system("cls");
                    fflush(stdin);
                    flag = 1;
                }
                else
                {
                    printf("ERROR.\n");
                    system("pause");
                    system("cls");
                    fflush(stdin);
                }
                break;
            case 2:
                if(flag == 1 && flagMapeado == 1)
                {
                    eParticipantes_Prints(listaParticipantesMapeada);
                    system("pause");
                    system("cls");
                }
                else
                {
                    printf("No se cargo archivo, ni se mapeo\n");
                    system("pause");
                    system("cls");
                }
                break;
            case 3:
                if(flag == 1)
                {

                    listaParticipantesMapeada = ll_map(listaParticipantes, asigProm);
                    eParticipantes_Prints(listaParticipantesMapeada);
                    flagMapeado = 1;
                    system("pause");
                    system("cls");
                }
                else
                {
                    printf("No se cargo archivo.\n");
                    system("pause");
                    system("cls");
                }
                break;
            case 4:
                if(flag == 1 && flagMapeado == 1)
                {
                    get_EntradaInt(&order, "1 MX1 2 MX2 3 MX3 4 SUPER.\n", "Error.\n", 4, 1, 5);
                    listaParticipantesMapeadaAndFilter = ll_filter(listaParticipantesMapeada, categoria, &order);
                    eParticipantes_Prints(listaParticipantesMapeadaAndFilter);
                }
                else
                {
                    printf("No se cargo archivo, ni se asignaron promedios.\n");
                    system("pause");
                    system("cls");
                }
                break;
            case 5:
                if(flag == 1 && flagMapeado == 1)
                {

                }
                break;
            case 6:
                if(flag == 1 && flagMapeado == 1)
                {
                    system("pause");
                    system("cls");
                }
                else
                {
                    printf("No se cargo archivo, ni se asignaron promedios.\n");
                    system("pause");
                    system("cls");
                }
                break;
            }
        }

    }while (opcion != 7);

    return 0;
}




































ejemplo funciones para map y filter



void asigProm(void* elemento)
{
    eParticipantes* aux = NULL;
    if(elemento != NULL)
    {
        aux = (eParticipantes*) elemento;

        if (aux->time < 15)
        {
            eParticipantes_setPromedio(aux, 6);

        }
        else if (aux->time >= 15 && aux->time <= 20)
        {
            eParticipantes_setPromedio(aux, 8);
        }
        else if(aux->time > 20)
        {
            eParticipantes_setPromedio(aux, 10);
        }
    }
}


int categoria(void* elemento, int* order)
{
    int retorno = 0;
    eParticipantes* aux = (eParticipantes*) elemento;
    if((*order) == 1 && strcmp(aux->categoria , "MX1")==0 )
    {
        retorno = 1;
    }
    else if((*order) == 2 && strcmp(aux->categoria, "MX2") == 0)
    {
        retorno = 1;
    }
    else if((*order) == 3 && strcmp(aux->categoria ,"MX3")==0)
    {
        retorno = 1;
    }
    else if((*order) == 4 && strcmp(aux->categoria , "SUPER_ATV") == 0)
    {
        retorno = 1;
    }
    return retorno;
}



int comparePost(void* (datos1), void* (datos2))
{
    if((((ePost*)datos1)->followers > ((ePost*)datos2)->followers))
	{
		return 1;
	}
	if((((ePost*)datos1)->followers < ((ePost*)datos2)->followers))
	{
		return -1;
	}
	return 0;
}


void randomLikes(void* elemento)
{
    ePost* aux = NULL;
    int likes;
    int max = 5000;
    int min = 500;
    if(elemento != NULL)
    {
        aux = (ePost*) elemento;
        likes = rand() % (max - min + 1) + min;
        ePost_setLikes(aux, likes);
    }
}

void randomDislikes(void* elemento)
{
    ePost* aux = NULL;
    int disLikes;
    int max = 3500;
    int min = 300;
    if(elemento != NULL)
    {
        aux = (ePost*) elemento;
        disLikes = rand() % (max - min + 1) + min;
        ePost_setDislikes(aux, disLikes);
    }
}


void randomFollowers(void* elemento)
{
    ePost* aux = NULL;
    int followers;
    int max = 10000;
    int min = 20000;
    if(elemento != NULL)
    {
        aux = (ePost*) elemento;
        followers = rand() % (max - min + 1) + min;
        ePost_setFollowers(aux, followers);
    }
}


int filterMejoresPosteos(void* elemento)
{
    int retorno = 0;
    ePost* aux = NULL;
    if(elemento != NULL)
    {
        aux = (ePost*)elemento;
        if(aux->likes >= 3000)
        {
            retorno = 1;
        }
    }
    return retorno;
}


int filterPeorPosteos(void* elemento)
{
    int retorno = 0;
    ePost* aux = NULL;
    if(elemento != NULL)
    {
        aux = (ePost*) elemento;
        if(aux->dislikes > aux->likes)
        {
            retorno = 1;
        }
    }
    return retorno;
}




int servicio_Prints(LinkedList* pArray, eRubro* arrayRubro, int longitudRubro)
{
	int retorno = 1;
	int tam = ll_len(pArray);
	char buffer[50];
	if(pArray != NULL && tam > 0 && arrayRubro != NULL && longitudRubro > 0)
	{
	    printf("*********************************************************************************************************************************\n");
	    printf("*ID              DESCRICPION                            DOMICILIO                                 RUBRO              RECURSOS   *\n");
	    printf("*********************************************************************************************************************************\n");
		for(int i = 0; i < tam; i++)
		{
		    cargarDescripcionRubro(arrayRubro, longitudRubro, (((eEmergencia*)ll_get(pArray, i))->rubroId) , buffer);
			servicio_Print((eEmergencia*) ll_get(pArray, i), buffer );
		}
		retorno = 0;
	}
	return retorno;
}


void cargarDescripcionRubro(eRubro* arrayRubro, int longitudRubro, int idRubro, char* descripcion)
{
    if(arrayRubro!= NULL && longitudRubro> 0 && descripcion != NULL)
    {
        for(int i = 0; i < longitudRubro; i++)
        {
            if(arrayRubro[i].id == idRubro)
            {
                strcpy(descripcion, arrayRubro[i].descripcion);
                break;
            }
        }
    }
}


